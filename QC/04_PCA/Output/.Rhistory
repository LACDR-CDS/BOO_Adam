grid.rect(x, y, width, height,
gp = gpar(col = "white", lwd = 1, fill = NA))
# When the correlation level is high (above 0.4,
grid.text(ifelse(abs(t(cxy)[i,j]) > 0.4,
# the correlation level will be printed in the corresponding cell, rounded to 2 decimals.
sprintf("%.2f", round(t(cxy)[i, j], 2)),
""),
x, y, gp = gpar(fontsize = 8, col = "white"))
}
)
# A gradient (colorRamp) is created. Values corresponding to -1 will be colored green, values equal to 0 will be white, and values equal to 1 will be red. All values inbetween will be on the part of the color scale corresponding to the value.#c(-1, 0, 1), c("green", "white", "red"))
col_fun <- colorRamp2(c(-1, 0, 1), c("green", "white", "red"))#c("#008080", "white", "#b3002d"))
# A heatmap is plotted with the pairwise correlation data
Heatmap(
t(cxy),
col = col_fun,
border = 'grey5',
# The variables (rows) are clustered, the PCs (columns) are not.
cluster_columns = FALSE,
# A dendrogram is shown for the variables. This way, the hierarchical structure of the variables will become visible.
show_row_dend = TRUE,
show_column_dend = FALSE,
# The legend is given a title
name = "Corr",
# Text and cell formatting.
row_names_gp = gpar(fontsize = 8),
column_names_gp = gpar(fontsize = 8),
cell_fun = function(j, i, x, y, width, height, fill) {
grid.rect(x, y, width, height,
gp = gpar(col = "white", lwd = 1, fill = NA))
# When the correlation level is high (above 0.4,
grid.text(ifelse(abs(t(cxy)[i,j]) > 0.4,
# the correlation level will be printed in the corresponding cell, rounded to 2 decimals.
sprintf("%.2f", round(t(cxy)[i, j], 2)),
""),
x, y, gp = gpar(fontsize = 8, col = "white"))
}
)
# A gradient (colorRamp) is created. Values corresponding to -1 will be colored green, values equal to 0 will be white, and values equal to 1 will be red. All values inbetween will be on the part of the color scale corresponding to the value.
col_fun <- colorRamp2(c(-1, 0, 1), c("#008080", "white", "#b3002d"))
# A heatmap is plotted with the pairwise correlation data
Heatmap(
t(cxy),
col = col_fun,
border = 'grey5',
# The variables (rows) are clustered, the PCs (columns) are not.
cluster_columns = FALSE,
# A dendrogram is shown for the variables. This way, the hierarchical structure of the variables will become visible.
show_row_dend = TRUE,
show_column_dend = FALSE,
# The legend is given a title
name = "Corr",
# Text and cell formatting.
row_names_gp = gpar(fontsize = 8),
column_names_gp = gpar(fontsize = 8),
cell_fun = function(j, i, x, y, width, height, fill) {
grid.rect(x, y, width, height,
gp = gpar(col = "white", lwd = 1, fill = NA))
# When the correlation level is high (above 0.4,
grid.text(ifelse(abs(t(cxy)[i,j]) > 0.4,
# the correlation level will be printed in the corresponding cell, rounded to 2 decimals.
sprintf("%.2f", round(t(cxy)[i, j], 2)),
""),
x, y, gp = gpar(fontsize = 8, col = "white"))
}
)
metaData %>%
# PC1 and PC2 are plotted against each other
ggplot(aes(x = PC1, y = PC2,
# The points are coloured by compound class and shaped by plate ID, since these are the two correlations that will be investigated.
color = compound_class, shape=plate_ID)) +
geom_point(size = 2) +
# Labels are added
labs(x = paste0("PC2 (", round(100*var_explained[2,2], 2), "%)"),
y = paste0("PC3 (", round(100*var_explained[3,2], 2), "%)"),
color = "Class", shape = "Plate") +
ggtitle("PCA plot") +
theme_bw()
metaData %>%
# PC1 and PC2 are plotted against each other
ggplot(aes(x = PC1, y = PC2,
# The points are coloured by compound class and shaped by plate ID, since these are the two correlations that will be investigated.
color = compound_class, shape=plate_ID)) +
geom_point(size = 2) +
# Labels are added
labs(x = paste0("PC1 (", round(100*var_explained[2,2], 2), "%)"),
y = paste0("PC2 (", round(100*var_explained[3,2], 2), "%)"),
color = "Class", shape = "Plate") +
ggtitle("PCA plot") +
theme_bw()
metaData %>%
# PC1 and PC2 are plotted against each other
ggplot(aes(x = PC1, y = PC2,
# The points are coloured by compound class and shaped by plate ID, since these are the two correlations that will be investigated.
color = compound_class, shape=plate_ID)) +
geom_point(size = 2) +
geom_text(label) +
# Labels are added
labs(x = paste0("PC1 (", round(100*var_explained[2,2], 2), "%)"),
y = paste0("PC2 (", round(100*var_explained[3,2], 2), "%)"),
color = "Class", shape = "Plate") +
ggtitle("PCA plot") +
theme_bw()
metaData %>%
# PC1 and PC2 are plotted against each other
ggplot(aes(x = PC1, y = PC2,
# The points are coloured by compound class and shaped by plate ID, since these are the two correlations that will be investigated.
color = compound_class, shape=plate_ID)) +
geom_point(size = 2) +
geom_text(labels) +
# Labels are added
labs(x = paste0("PC1 (", round(100*var_explained[2,2], 2), "%)"),
y = paste0("PC2 (", round(100*var_explained[3,2], 2), "%)"),
color = "Class", shape = "Plate") +
ggtitle("PCA plot") +
theme_bw()
metaData %>%
# PC1 and PC2 are plotted against each other
ggplot(aes(x = PC1, y = PC2,
# The points are coloured by compound class and shaped by plate ID, since these are the two correlations that will be investigated.
color = compound_class, shape=plate_ID)) +
geom_point(size = 2) +
geom_text(label = sample_ID) +
# Labels are added
labs(x = paste0("PC1 (", round(100*var_explained[2,2], 2), "%)"),
y = paste0("PC2 (", round(100*var_explained[3,2], 2), "%)"),
color = "Class", shape = "Plate") +
ggtitle("PCA plot") +
theme_bw()
metaData %>%
# PC1 and PC2 are plotted against each other
ggplot(aes(x = PC1, y = PC2,
# The points are coloured by compound class and shaped by plate ID, since these are the two correlations that will be investigated.
color = compound_class, shape=plate_ID)) +
geom_point(size = 2) +
geom_text(label = metadata$sample_ID) +
# Labels are added
labs(x = paste0("PC1 (", round(100*var_explained[2,2], 2), "%)"),
y = paste0("PC2 (", round(100*var_explained[3,2], 2), "%)"),
color = "Class", shape = "Plate") +
ggtitle("PCA plot") +
theme_bw()
metaData %>%
# PC1 and PC2 are plotted against each other
ggplot(aes(x = PC1, y = PC2,
# The points are coloured by compound class and shaped by plate ID, since these are the two correlations that will be investigated.
color = compound_class, shape=plate_ID)) +
geom_point(size = 2) +
geom_text(label = metaData$sample_ID) +
# Labels are added
labs(x = paste0("PC1 (", round(100*var_explained[2,2], 2), "%)"),
y = paste0("PC2 (", round(100*var_explained[3,2], 2), "%)"),
color = "Class", shape = "Plate") +
ggtitle("PCA plot") +
theme_bw()
metaData %>%
# PC1 and PC2 are plotted against each other
ggplot(aes(x = PC1, y = PC2,
# The points are coloured by compound class and shaped by plate ID, since these are the two correlations that will be investigated.
color = compound_class, shape=plate_ID)) +
geom_point(size = 2) +
geom_label(label = metadata$sample_ID, check_overlap) +
# Labels are added
labs(x = paste0("PC1 (", round(100*var_explained[2,2], 2), "%)"),
y = paste0("PC2 (", round(100*var_explained[3,2], 2), "%)"),
color = "Class", shape = "Plate") +
ggtitle("PCA plot") +
theme_bw()
metaData %>%
# PC1 and PC2 are plotted against each other
ggplot(aes(x = PC1, y = PC2,
# The points are coloured by compound class and shaped by plate ID, since these are the two correlations that will be investigated.
color = compound_class, shape=plate_ID)) +
geom_point(size = 2) +
geom_label(label = metaData$sample_ID, check_overlap) +
# Labels are added
labs(x = paste0("PC1 (", round(100*var_explained[2,2], 2), "%)"),
y = paste0("PC2 (", round(100*var_explained[3,2], 2), "%)"),
color = "Class", shape = "Plate") +
ggtitle("PCA plot") +
theme_bw()
metaData %>%
# PC1 and PC2 are plotted against each other
ggplot(aes(x = PC1, y = PC2,
# The points are coloured by compound class and shaped by plate ID, since these are the two correlations that will be investigated.
color = compound_class, shape=plate_ID)) +
geom_point(size = 2) +
geom_text(label = metaData$sample_ID) +
# Labels are added
labs(x = paste0("PC1 (", round(100*var_explained[2,2], 2), "%)"),
y = paste0("PC2 (", round(100*var_explained[3,2], 2), "%)"),
color = "Class", shape = "Plate") +
ggtitle("PCA plot") +
theme_bw()
library(ggrepel)
metaData %>%
# PC1 and PC2 are plotted against each other
ggplot(aes(x = PC1, y = PC2,
# The points are coloured by compound class and shaped by plate ID, since these are the two correlations that will be investigated.
color = compound_class, shape=plate_ID)) +
geom_point(size = 2) +
geom_text_repel(label = metaData$sample_ID) +
# Labels are added
labs(x = paste0("PC1 (", round(100*var_explained[2,2], 2), "%)"),
y = paste0("PC2 (", round(100*var_explained[3,2], 2), "%)"),
color = "Class", shape = "Plate") +
ggtitle("PCA plot") +
theme_bw()
View(metaData)
View(cpmData)
# metaData file with added PCA columns is saved. Nothing in the cpmdata changed, so there is no need to save it again.
save(metaData, file=paste0(root_dir, "Output/metaData.Rdata"))
devtools::session_info()
# Create a data frame of the total CPM (is the sums of each row in cpmData, rounded to 3 decimals) for each probe
manifest <- data.frame(total_cpm = round(rowSums(cpmData), 3)) %>%
# Put the rownames from total_cpm into a column named probe_name
rownames_to_column(var="probe_name") %>%
# Calculate the average CPM across samples for each probe (= total cpm divided by the number of columns (ncol) of cpmData (each column in cpmData is a sample)). This is, again, rounded to 3 decimals.
mutate(avg_cpm = round(total_cpm / ncol(cpmData), 3)) %>%
# Add the avg_cpm and total_cpm column to manifest, to the right of probe_name
right_join(manifest, by="probe_name")
# The rm function clears the environment from all objects.
rm(list=ls())
# Loading the needed packages (loaded more than specified, because more packages were needed)
library(readxl)
library(tidyverse)
library(dplyr)
library(ggplot2)
# Setting the root directory to the folder for this analysis, setting the paths to the countdata, metadata, and probe manifest.
root_dir <- "C:/Users/mmpse/Documents/GitHub/BOO-Adam/QC/02_Probe_QC/"
count_path <- "Input/countData.Rdata"
metadata_path <- "Input/metaData.Rdata"
manifest_path <- "Input/Probe_Manifest.xlsx"
# Setting the paths to the place where future objects will be saved
count_store <- "Output/countData.Rdata"
cpm_store <- "Output/cpmData.Rdata"
metadata_store <- "Output/metaData.Rdata"
probedata_store <- "Output/probeManifest.Rdata"
# count data, metadata and probe manifest are loaded.
load(paste0(root_dir, count_path))
load(paste0(root_dir, metadata_path))
manifest <- read_xlsx(paste0(root_dir, manifest_path))
# original count data is stored for potential use later on
countData_original <- countData
# probe_name_old: probe name from before update
# probe_ID: probe identificator
# probe_sequence: DNA sequence of the probe
# probe_coord: location on the genome where the probe is matched to
# gene_symbol: gene the probe belongs to
# entrez_id, ensembl_id, hgnc_id: several identificators for the gene
# gene_symbol_old, entrez_id_old: gene symbol and entrez id from before update
# percentage_match: percentage with which the probe matches to the gene sequence
str(manifest)
#
setequal(rownames(countData), manifest$probe_name_old)
#
NA_gene_symbol<- sum(is.na(manifest$gene_symbol))
NA_gene_symbol
# Counting the amount of genes that still have the same symbol as before the update
manifest %>%
count(gene_symbol == gene_symbol_old)
# Adding an empty column called flag_realignment
manifest %>%
add_column(flag_realignment = NA)
# flag_realignment column now describes whether a probe should be removed, renamed or kept unchanged.
manifest <- manifest %>%
mutate(flag_realignment =
# when the new gene symbol is equal to the old one, write "unchanged"
case_when(gene_symbol_old == gene_symbol ~ "unchanged",
# when the new gene symbol is not equal to the old one, write "renamed"
gene_symbol_old != gene_symbol ~ "renamed",
# when the new gene symbol is NA, write "removed"
is.na(gene_symbol) ~ "removed"))
# checking if the flag realignment went well. If the realignment went well, this should say: removed: 603, renamed: 608, unchanged: 21322, NA: 0
table(manifest$flag_realignment, useNA = "always")
# subsetted countData to only show the probes which do not have the tag "removed" in the flag_realignment column of manifest_new
countData <- subset(countData, row.names(countData) %in% manifest$probe_name_old & manifest$flag_realignment != "removed")
# The mutate verb adds a probe_name column. The new probe names are gene_symbol and probe_ID, separated by an underscore.
manifest <- manifest %>%
mutate(probe_name = paste(gene_symbol, probe_ID, sep = "_"))
countData <- countData %>%
# turning the row names (probes) back into a column
rownames_to_column(var = "probe_name_old") %>%
# merging the countData with manifest, to the left of probe_name_old
left_join(y = manifest, by= "probe_name_old") %>%
# selecting only the probe_name and sample_ID columns, these are the two columns of the manifest that will be used in the countData
select(probe_name, all_of(metaData$sample_ID)) %>%
# changing the column probe_name to rownames of the countData: probe_name_old has now been swapped for the new probe_name.
column_to_rownames(var="probe_name")
# checking dimensions of the manifest (should be 22533/13 for manifest and 21930 (=22533-603) for countData, 66/29 for metaData)
dim(manifest)
dim(countData)
dim(metaData)
# calculating the counts per million and putting them in a dataframe
cpmData <- data.frame(
# the apply function is used to apply the calculation to the rows ("2") of the countData
apply(countData, 2,
# cpm = (counts / sum of all counts in the row) * 1 million
function(x){x/sum(x)*1000000}))
# Create a data frame of the total CPM (is the sums of each row in cpmData, rounded to 3 decimals) for each probe
manifest <- data.frame(total_cpm = round(rowSums(cpmData), 3)) %>%
# Put the rownames from total_cpm into a column named probe_name
rownames_to_column(var="probe_name") %>%
# Calculate the average CPM across samples for each probe (= total cpm divided by the number of columns (ncol) of cpmData (each column in cpmData is a sample)). This is, again, rounded to 3 decimals.
mutate(avg_cpm = round(total_cpm / ncol(cpmData), 3)) %>%
# Add the avg_cpm and total_cpm column to manifest, to the right of probe_name
right_join(manifest, by="probe_name")
# showing the probes in descending order of expression level, so the highest expressed probe is at the top.
highest_expressed_probes <- manifest %>%
arrange(desc(avg_cpm))
highest_expressed_probes
#
manifest %>%
# subsetting the manifest so the unassigned probes are not included
filter(flag_realignment != "removed") %>%
# mutating avg_cpm to log2(avg_cpm+1), so it can be plotted
mutate(log2avg_cpm = log2(avg_cpm+1)) %>%
ggplot() +
# plotting log2avg_cpm as a histogram, with light blue filled bars and a binwidth of 0.2
geom_histogram(aes(x=log2avg_cpm), fill='lightblue', color='black', binwidth = 0.2) +
# creating a red, dashed vertical line at x = 1; this is the threshold for lowly expressed genes.
geom_vline(aes(xintercept=1), color='red', linetype='dashed') +
# labelling the x-axis so that it is clear what the plot means
xlab('log2 of the average CPM (+1) per sample for each probe') +
# The theme makes the plot look cleaner.
theme_bw()
# Probes with no expression have a total_cpm of 0. These are now filtered from the manifest.
manifest %>%
filter(total_cpm == 0)
#
metaData %>%
group_by(mean_ID) %>%
# summarize the number of reps for each condition.
#.groups = "drop" removes the grouping done by group_by, this prevents errors from happening later (if this dataframe would be used later on).
summarize(n_reps = n(), .groups = "drop") %>%
# make sure there are no duplicate conditions.
distinct()
# Creating a vector named loop, containing the experimental conditions
loop <- unique(metaData$mean_ID)
loop
# Creating the dataframe relevanceFilter, which contains only the rownames of cpmdata
relevanceFilter <- data.frame(probe_name = rownames(cpmData))
# For each unique mean ID (= each unique condition)
for(i in loop){
# Subset metadata to include only samples with that mean ID (so, for each loop, the samples of one unique condition are selected)
set <- metaData %>%
filter(mean_ID == i)
# Subset the CPM data to include only those samples (so you have the cpm data for all repetitions of the condition)
cpm.set <- cpmData[ , set$sample_ID]
# Count the percentage of values for each probe that are above 1 (CPM above 1 is the threshold for relevance. The percentage values indicate the percentage of replicates in which the value for each probe is above 1)
df.set <- data.frame(round(100 * rowSums(cpm.set > 1) / ncol(cpm.set), 2)) %>%
rownames_to_column(var = "probe_name")
# Set the column name to the current mean ID
colnames(df.set) <- c("probe_name", i)
# Merge with the relevance filter output thus far (so that all values will appear in the same dataframe)
relevanceFilter <- left_join(relevanceFilter, df.set, by="probe_name")
}
# Turn the probe name column back into row names
relevanceFilter <- relevanceFilter %>%
column_to_rownames(var="probe_name")
# Show the first 6 rows of the output
head(relevanceFilter)
relevanceFilter <- relevanceFilter %>%
# Create a variable counting the number of rows with a value above 66 -> a probe is relevant if it has a value of >1 in at least two thirds of the data (so at least 66% of the replications).
mutate(n_relevant = rowSums(relevanceFilter >= 66)) %>%
# Move this column to the first place (left) in the data frame
select(n_relevant, everything()) %>%
# Convert row names to a new column called probe_name
rownames_to_column(var="probe_name")
# Add the relevanceFilter to the manifest using this new probe_name column
manifest <- left_join(manifest, relevanceFilter, by="probe_name")
# Summarize the number of relevant experiments (minimum, 1st and 3rd quantile, median, mean, maximum) for each probe
summary(manifest$n_relevant)
# A probe is relevant if it passes the threshold (cpm >1 in at least 2/3 of the repetitions) for at least 1 experimental condition. TRUE indicates a relevant probe, FALSE indicates an irrelevant probe.
manifest <- manifest %>%
mutate(flag_relevant = ifelse(n_relevant >= 1, T, F))
# Put the relevance into a table
table(manifest$flag_relevant, useNA="always")
# Put the probes that pass the filter into a vector
kept <- (manifest %>%
filter(flag_relevant == T))$probe_name
# Check the dimensions of the count data to make sure they are still correct (should be 21930/66)
dim(countData)
# Subset the count data so that it contains only the relevant probes
countData <- countData[kept, ]
# Check dimensions again following the subset (number of rows should be equal to the number of relevant probes, which is 14646)
dim(countData)
# manifest is filtered so only assigned probes are used in the plot
manifest %>%
filter(flag_realignment != "Probe removed") %>%
ggplot() +
# A histogram is made with the number of relevant probes on the x-axis.
geom_histogram(aes(x = n_relevant,
# Bins for relevant and irrelevant probes will be filled with a different color
fill = flag_relevant),
color = "grey20",
binwidth = 1) +
# setting axis labels and a figure title
xlab(paste0("Number of conditions where a probe reaches 1 CPM in at least 66% reps")) +
ylab("Number of probes") +
ggtitle("Relevance distribution") +
# theme makes the plot look cleaner
theme_bw() +
# Remove the legend
theme(legend.position = "none")
# filtering the manifest so it shows only the probes that are relevant in all of the conditions (where n_relevant is at its maximum level). NA values are removed.
manifest %>%
filter(n_relevant == max(n_relevant, na.rm=T))
manifest %>%
# unaligned probes are filtered out
filter(flag_realignment != "Probe removed") %>%
# add a column with the log2(cpm + 1) of the average cpm
mutate(log2avg_cpm = log2(avg_cpm + 1)) %>%
ggplot() +
# create a histogram with the log2avg_cpm on the x-axis
geom_histogram(aes(x = log2avg_cpm,
# bins are color-filled by relevance
fill = flag_relevant),
color = "black", binwidth = 0.2) +
# label is added on the x-axis, plot title is added
xlab("log2 of the average CPM (+1) per sample for each probe") +
ggtitle("Distribution of log2 (CPM + 1) values colored by relevance") +
# the theme makes the plot look cleaner
theme_bw() +
# remove the legend from the plot
theme(legend.position='none')
countData <- countData %>%
# change the row names of countData into a column called probe_name
rownames_to_column(var = "probe_name") %>%
# reduce the probe name to just the gene symbol, by removing the probe ID (making it NA) and separator.
separate(probe_name,
into=c("gene_symbol", NA),
sep = "_") %>%
# group the data by gene symbol
group_by(gene_symbol) %>%
# add the values in each row to each other, so that the counts of each gene are taken together.
summarise(across(where(is.numeric), sum),
# remove the grouping to avoid future errors
.groups = "drop") %>%
# turn the column gene_symbol into row names
column_to_rownames(var = "gene_symbol")
# show the first 10 rows of countData
countData[1:10, ]
cpmData <- data.frame(
# for each row, calculate cpm (cpm = (counts / sum of all counts in the column) * 1 million)
apply(countData, 2, function(x){x/sum(x)*1E6}))
cpmData[1:10, ]
#
#
# saving the manifest, countData and cpmData to the output file (via the paths defined earlier)
save(manifest, file=paste0(root_dir, probedata_store))
save(countData, file=paste0(root_dir, count_store))
save(cpmData, file=paste0(root_dir, cpm_store))
#
devtools::session_info()
rm(list = ls())
rm(list = ls())
root_dir <- "C:/Users/mmpse/Documents/GitHub/BOO-Adam/DEG/"
count_path <- "Input/countData.Rdata"
metadata_path <- "Input/metaData.Rdata"
low_store <- "Output/DEGres_low.Rdata"
high_store <- "Output/DEGres_high.Rdata"
library(DESec2)
install.packages("DESec2")
library(DESeq2)
install.packages("DESeq2")
library(DESeq2)
install.packages("BiocManager")
BiocManager::install("DESeq2")
library(DESeq2)
#
library(tidyverse)
library(ggrepel)
library(DESeq2)
#
countData <- load(paste0(root_dir, count_path))
#
countData <- load(paste0(root_dir, count_path))
metaData <- load(paste0(root_dir, metadata_path))
#
countData <- load(paste0(root_dir, count_path))
countData
rm(list = ls())
root_dir <- "C:/Users/mmpse/Documents/GitHub/BOO-Adam/DEG/"
count_path <- "Input/countData.Rdata"
metadata_path <- "Input/metaData.Rdata"
low_store <- "Output/DEGres_low.Rdata"
high_store <- "Output/DEGres_high.Rdata"
#
countData <- load(paste0(root_dir, count_path))
metaData <- load(paste0(root_dir, metadata_path))
#
countData <- load(paste0(root_dir, count_path))
metaData <- load(paste0(root_dir, metadata_path))
#
load(paste0(root_dir, count_path))
load(paste0(root_dir, metadata_path))
# Selecting the experimental conditions and their control conditions from the metadata
metaData %>%
select(mean_ID, mean_ID_control) %>%
# Filtering out the NA values (= untreated cells) from the selected data, do not show duplicate values
filter(!is.na(mean_ID_control)) %>%
distinct()
View(metaData)
View(metaData)
View(metaData)
# Filtering out NA values (DMSO-treated samples) in the mean_ID_control column, selecting the same columns from the metadata as in the previous chunks, changing the compound_ID column name to file_ID
contrast <- metaData %>%
filter(!is.na(mean_ID_control)) %>%
select(mean_ID, mean_ID_control, file_ID = compound_ID) %>%
distinct
contrast
