# The environment has been cleaned.
ls()
# Loading the needed packages
library(readxl)
library(tidyverse)
library(dplyr)
library(sessioninfo)
# Setting the root directory to the folder for this analysis, setting the paths to the countdata, metadata, and probe manifest.
root_dir <- "C:/Users/mmpse/Documents/GitHub/BOO-Adam/QC/02_Probe_QC/"
count_path <- "Input/countData.Rdata"
metadata_path <- "Input/metaData.Rdata"
manifest_path <- "Input/Probe_Manifest.xlsx"
# count_store, cpm_store, metadata_store, and probedata_store will be set later on, as I have nothing to set them with yet.
# count data, metadata and probe manifest are loaded.
load(paste0(root_dir, count_path))
load(paste0(root_dir, metadata_path))
read_xlsx(paste0(root_dir, manifest_path))
# probe_name_old: probe name. why old?
# probe_ID: probe identificator
# probe_sequence: DNA sequence of the probe
# probe_coord: ?
# gene_symbol: gene the probe belongs to
# entrez_id, ensembl_id, hgnc_id: several identificators for the gene
# gene_symbol_old, entrez_id_old: gene symbol and entrez id from before update
# percentage_match: percentage with which the probe matches to the gene sequence
manifest
manifest <- read_xlsx(paste0(root_dir, manifest_path))
# probe_name_old: probe name. why old?
# probe_ID: probe identificator
# probe_sequence: DNA sequence of the probe
# probe_coord: ?
# gene_symbol: gene the probe belongs to
# entrez_id, ensembl_id, hgnc_id: several identificators for the gene
# gene_symbol_old, entrez_id_old: gene symbol and entrez id from before update
# percentage_match: percentage with which the probe matches to the gene sequence
manifest
#
setequal(rownames(countData), manifest$probe_name_old)
#
NA_gene_symbol<- sum(is.na(manifest$gene_symbol))
NA_gene_symbol
#
manifest %>%
count(gene_symbol == gene_symbol_old)
# This line gives an error when run again, as the column has already been added.
manifest %>%
add_column(flag_realignment = NA)
manifest_new <- manifest %>%
mutate(flag_realignment =
case_when(gene_symbol_old == gene_symbol ~ "unchanged",
gene_symbol_old != gene_symbol ~ "renamed",
is.na(gene_symbol) ~ "removed"))
manifest_new <- manifest %>%
mutate(flag_realignment =
case_when(gene_symbol_old == gene_symbol ~ "unchanged",
gene_symbol_old != gene_symbol ~ "renamed",
is.na(gene_symbol) ~ "removed"))
#
remove_probes <- subset(manifest_new, flag_realignment == "removed")
View(remove_probes)
#
remove_probes <- subset(manifest_new, flag_realignment != "removed")
View(remove_probes)
count_new <- select(countData, remove_probes$probe_name_old)
count_new <- select(countData, colnames == remove_probes$probe_name_old)
count_new <- select(countData, remove_probes$probe_name_old)
View(countData)
count_new <- countData %>%
filter(remove_probes$probe_name_old)
count_new <- countData %>%
filter(rownames() %in% remove_probes$probe_name_old)
count_new <- countData %>%
filter(%in% remove_probes$probe_name_old)
count_new <- countData[row.names(countData) %in% remove_probes$probe_name_old]
count_new <- subset(countData, row.names(countData) == manifest_new$probe_name_old & manifest_new$flag_realignment != "removed")
View(count_new)
count_new <- subset(countData, row.names(countData) %in% manifest_new$probe_name_old & manifest_new$flag_realignment != "removed")
View(count_new)
#
countData <- subset(countData, row.names(countData) %in% manifest_new$probe_name_old & manifest_new$flag_realignment != "removed")
#
probeManifest <- manifest_new %>%
mutate(probe_name = "gene_symbol_probe_ID")
View(probeManifest)
#
probeManifest <- manifest_new %>%
mutate(probe_name = "`gene_symbol`_`probe_ID`")
mutate(probe_name = paste(manifest_new$gene_symbol, manifest_new$probe_ID, sep = "_")
#
probeManifest <- manifest_new %>%
mutate(probe_name = paste(gene_symbol, probe_ID, sep = "_")
#
probeManifest <- manifest_new %>%
#
manifest_newprobes <- manifest_new %>%
mutate(probe_name = paste(gene_symbol, probe_ID, sep = "_")
#
manifest_newprobes <- manifest_new %>%
mutate(probe_name = paste(gene_symbol, probe_ID, sep = "_"))
View(manifest_newprobes)
# The mutate verb adds a probe_name column. The new probe names are gene_symbol and probe_ID, separated by an underscore.
manifest_newprobes <- manifest_new %>%
mutate(probe_name = paste(gene_symbol, probe_ID, sep = "_"))
#
dim(manifest_newprobes)
#
dim(manifest_new)
dim(countData)
#
cpmData <- 1000000 / count_new
View(cpmData)
View(count_new)
count_store <- "Output/countData.Rdata"
cpm_store <- "Output/cpmData.Rdata"
metadata_store <- "Output/metaData.Rdata"
probedata_store <- "Output/probeManifest.Rdata"
#
cpmData <- cpm(count_new, normalized.lib.sizes = FALSE)
library(edgeR)
install.package(edgeR)
install.packages(edgeR)
install.packages("BiocManager")
install.packages("Rtools")
install.packages("BiocManager")
BiocManager::install("edgeR")
