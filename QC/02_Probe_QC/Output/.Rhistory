# The environment has been cleaned.
ls()
# Loading the needed packages
library(readxl)
library(tidyverse)
library(dplyr)
library(sessioninfo)
# Setting the root directory to the folder for this analysis, setting the paths to the countdata, metadata, and probe manifest.
root_dir <- "C:/Users/mmpse/Documents/GitHub/BOO-Adam/QC/02_Probe_QC/"
count_path <- "Input/countData.Rdata"
metadata_path <- "Input/metaData.Rdata"
manifest_path <- "Input/Probe_Manifest.xlsx"
# count_store, cpm_store, metadata_store, and probedata_store will be set later on, as I have nothing to set them with yet.
# count data, metadata and probe manifest are loaded.
load(paste0(root_dir, count_path))
load(paste0(root_dir, metadata_path))
read_xlsx(paste0(root_dir, manifest_path))
# probe_name_old: probe name. why old?
# probe_ID: probe identificator
# probe_sequence: DNA sequence of the probe
# probe_coord: ?
# gene_symbol: gene the probe belongs to
# entrez_id, ensembl_id, hgnc_id: several identificators for the gene
# gene_symbol_old, entrez_id_old: gene symbol and entrez id from before update
# percentage_match: percentage with which the probe matches to the gene sequence
manifest
manifest <- read_xlsx(paste0(root_dir, manifest_path))
# probe_name_old: probe name. why old?
# probe_ID: probe identificator
# probe_sequence: DNA sequence of the probe
# probe_coord: ?
# gene_symbol: gene the probe belongs to
# entrez_id, ensembl_id, hgnc_id: several identificators for the gene
# gene_symbol_old, entrez_id_old: gene symbol and entrez id from before update
# percentage_match: percentage with which the probe matches to the gene sequence
manifest
#
setequal(rownames(countData), manifest$probe_name_old)
#
NA_gene_symbol<- sum(is.na(manifest$gene_symbol))
NA_gene_symbol
#
manifest %>%
count(gene_symbol == gene_symbol_old)
# This line gives an error when run again, as the column has already been added.
manifest %>%
add_column(flag_realignment = NA)
manifest_new <- manifest %>%
mutate(flag_realignment =
case_when(gene_symbol_old == gene_symbol ~ "unchanged",
gene_symbol_old != gene_symbol ~ "renamed",
is.na(gene_symbol) ~ "removed"))
manifest_new <- manifest %>%
mutate(flag_realignment =
case_when(gene_symbol_old == gene_symbol ~ "unchanged",
gene_symbol_old != gene_symbol ~ "renamed",
is.na(gene_symbol) ~ "removed"))
#
remove_probes <- subset(manifest_new, flag_realignment == "removed")
View(remove_probes)
#
remove_probes <- subset(manifest_new, flag_realignment != "removed")
View(remove_probes)
count_new <- select(countData, remove_probes$probe_name_old)
count_new <- select(countData, colnames == remove_probes$probe_name_old)
count_new <- select(countData, remove_probes$probe_name_old)
View(countData)
count_new <- countData %>%
filter(remove_probes$probe_name_old)
count_new <- countData %>%
filter(rownames() %in% remove_probes$probe_name_old)
count_new <- countData %>%
filter(%in% remove_probes$probe_name_old)
count_new <- countData[row.names(countData) %in% remove_probes$probe_name_old]
count_new <- subset(countData, row.names(countData) == manifest_new$probe_name_old & manifest_new$flag_realignment != "removed")
View(count_new)
count_new <- subset(countData, row.names(countData) %in% manifest_new$probe_name_old & manifest_new$flag_realignment != "removed")
View(count_new)
#
countData <- subset(countData, row.names(countData) %in% manifest_new$probe_name_old & manifest_new$flag_realignment != "removed")
#
probeManifest <- manifest_new %>%
mutate(probe_name = "gene_symbol_probe_ID")
View(probeManifest)
#
probeManifest <- manifest_new %>%
mutate(probe_name = "`gene_symbol`_`probe_ID`")
mutate(probe_name = paste(manifest_new$gene_symbol, manifest_new$probe_ID, sep = "_")
#
probeManifest <- manifest_new %>%
mutate(probe_name = paste(gene_symbol, probe_ID, sep = "_")
#
probeManifest <- manifest_new %>%
#
manifest_newprobes <- manifest_new %>%
mutate(probe_name = paste(gene_symbol, probe_ID, sep = "_")
#
manifest_newprobes <- manifest_new %>%
mutate(probe_name = paste(gene_symbol, probe_ID, sep = "_"))
View(manifest_newprobes)
# The mutate verb adds a probe_name column. The new probe names are gene_symbol and probe_ID, separated by an underscore.
manifest_newprobes <- manifest_new %>%
mutate(probe_name = paste(gene_symbol, probe_ID, sep = "_"))
#
dim(manifest_newprobes)
#
dim(manifest_new)
dim(countData)
#
cpmData <- 1000000 / count_new
View(cpmData)
View(count_new)
count_store <- "Output/countData.Rdata"
cpm_store <- "Output/cpmData.Rdata"
metadata_store <- "Output/metaData.Rdata"
probedata_store <- "Output/probeManifest.Rdata"
#
cpmData <- cpm(count_new, normalized.lib.sizes = FALSE)
library(edgeR)
install.package(edgeR)
install.packages(edgeR)
install.packages("BiocManager")
install.packages("Rtools")
install.packages("BiocManager")
BiocManager::install("edgeR")
library(edgeR)
#
cpmData <-  cpm(count_new, normalized.lib.sizes = FALSE)
View(cpmData)
#
cpmData <-  cpm(count_new, normalized.lib.sizes = TRUE)
#
cpmData <-  cpm(count_new, normalized.lib.sizes = FALSE)
#
cpmData <-  cpm(count_new)
#
probeManifest <- probeManifest %>%
mutate(total_cpm = sum(col(countData)),
average_cpm = mean(col(countData)))
#
probeManifest %>%
mutate(total_cpm = sum(col(countData)),
average_cpm = mean(col(countData)))
#
probeManifest %>%
mutate(total_cpm = sum(col(countData)),
average_cpm = mean(col(countData)))
#
probeManifest %>%
mutate(total_cpm = sum(col(countData))
average_cpm = mean(col(countData)))
#
probeManifest %>%
mutate(total_cpm = sum(col(countData))
average_cpm = mean(col(countData)))
mutate(total_cpm = sum(col(countData))
View(probeManifest)
View(probeManifest)
View(manifest_new)
View(manifest_newprobes)
mutate(total_cpm = sum(col(countData))
mutate(total_cpm = mean(col(countData))
mutate(total_cpm = sum(col(countData))
#
manifest_newprobes %>%
manifest_newprobes %>%
mutate(total_cpm = sum(col(countData)))
#
manifest_newprobes <- manifest_newprobes %>%
mutate(total_cpm = sum(row(countData)))
#
manifest_newprobes <- manifest_newprobes %>%
mutate(total_cpm = sum(countData))
# Loading the needed packages
library(readxl)
library(tidyverse)
library(dplyr)
library(sessioninfo)
library(edgeR)
#
manifest_newprobes <- manifest_newprobes %>%
mutate(total_cpm = sum(row(countData)))
#
manifest_newprobes <- manifest_newprobes %>%
mutate(total_cpm = sum(countData))
View(cpmData)
#
manifest_newprobes <- manifest_newprobes %>%
mutate(total_cpm = sum(cpmData))
#
manifest_removedprobes <- subset(manifest_new, row.names(countData) %in% manifest_new$probe_name_old & manifest_new$flag_realignment != "removed")
View(manifest_removedprobes)
manifest_removedprobes <- manifest_removedprobes %>%
mutate(total_cpm = rowSums(cpmdata))
manifest_removedprobes <- manifest_removedprobes %>%
mutate(total_cpm = rowSums(cpmData))
manifest_removedprobes <- manifest_removedprobes %>%
mutate(total_cpm = rowSums(cpmData),
average_cpm = rowMeans(cpmData))
manifest_removedprobes <- manifest_newprobes %>%
mutate(total_cpm = rowSums(cpmData),
average_cpm = rowMeans(cpmData))
manifest_removedprobes <- manifest_removedprobes %>%
mutate(total_cpm = rowSums(cpmData),
average_cpm = rowMeans(cpmData))
highest_expressed_probes <- order(manifest_removedprobes$average_cpm)
highest_expressed_probes
highest_expressed_probes <- manifest_removedprobes %>%
arrange(desc(average_cpm))
highest_expressed_probes
library(ggplot2)
#
ggplot(manifest_removedprobes, aes(x = log2(average_cpm + 1), y = log2(average_cpm + 1))) +
geom_point()
View(manifest_newprobes)
# First removed the unassigned probes from the manifest, so no error would occur because of the removed probes in the countdata.
manifest_removedprobes <- subset(manifest_newprobes, row.names(countData) %in% manifest_newprobes$probe_name_old & manifest_newprobes$flag_realignment != "removed")
# created a column for the total cpm per probe and the mean cpm per probe
manifest_removedprobes <- manifest_removedprobes %>%
mutate(total_cpm = rowSums(cpmData),
average_cpm = rowMeans(cpmData))
# showing the probes in descending order of expression level, so the highest expressed probe is at the top.
highest_expressed_probes <- manifest_removedprobes %>%
arrange(desc(average_cpm))
#
ggplot(manifest_removedprobes, aes(x = log2(average_cpm + 1), y = probe_name) +
#
ggplot(manifest_removedprobes, aes(x = log2(average_cpm + 1), y = probe_name)) +
geom_point()
#
ggplot(manifest_removedprobes, aes(x = probe_name, y = log2(average_cpm + 1))) +
#
ggplot(manifest_removedprobes, aes(x = log2(average_cpm + 1), y = probe_name)) +
geom_point()
#
ggplot(manifest_removedprobes, aes(x = log2(average_cpm + 1))) +
geom_point()
lowest_expressed_genes <- manifest_removedprobes %>%
arrange(average_cpm)
lowest_expressed_genes
#
ggplot(manifest_removedprobes, aes(x = log2(average_cpm + 1)))
#
ggplot(manifest_removedprobes, aes(x = log2(average_cpm + 1))) +
geom_point()
#
ggplot(manifest_removedprobes, aes(x = log2(average_cpm + 1))) +
geom_line()
#
ggplot(manifest_removedprobes, aes(x = log2(average_cpm + 1))) +
geom_bar()
#
ggplot(manifest_removedprobes, aes(x = log2(average_cpm + 1))) +
geom_histogram()
# probe_name_old: probe name. why old?
# probe_ID: probe identificator
# probe_sequence: DNA sequence of the probe
# probe_coord: location on the genome where the probe is matched to
# gene_symbol: gene the probe belongs to
# entrez_id, ensembl_id, hgnc_id: several identificators for the gene
# gene_symbol_old, entrez_id_old: gene symbol and entrez id from before update
# percentage_match: percentage with which the probe matches to the gene sequence
str(manifest)
# The environment has been cleaned.
rm(list=ls())
# Loading the needed packages
library(readxl)
library(tidyverse)
library(dplyr)
library(sessioninfo)
library(ggplot2)
# Setting the root directory to the folder for this analysis, setting the paths to the countdata, metadata, and probe manifest.
root_dir <- "C:/Users/mmpse/Documents/GitHub/BOO-Adam/QC/02_Probe_QC/"
count_path <- "Input/countData.Rdata"
metadata_path <- "Input/metaData.Rdata"
manifest_path <- "Input/Probe_Manifest.xlsx"
# Setting the paths to the place where future objects will be saved
count_store <- "Output/countData.Rdata"
cpm_store <- "Output/cpmData.Rdata"
metadata_store <- "Output/metaData.Rdata"
probedata_store <- "Output/probeManifest.Rdata"
# original count data is stored for potential use later on
countData_original <- countData
# count data, metadata and probe manifest are loaded.
load(paste0(root_dir, count_path))
load(paste0(root_dir, metadata_path))
manifest <- read_xlsx(paste0(root_dir, manifest_path))
# original count data is stored for potential use later on
countData_original <- countData
#
setequal(rownames(countData), manifest$probe_name_old)
# probe_name_old: probe name from before update
# probe_ID: probe identificator
# probe_sequence: DNA sequence of the probe
# probe_coord: location on the genome where the probe is matched to
# gene_symbol: gene the probe belongs to
# entrez_id, ensembl_id, hgnc_id: several identificators for the gene
# gene_symbol_old, entrez_id_old: gene symbol and entrez id from before update
# percentage_match: percentage with which the probe matches to the gene sequence
str(manifest)
#
NA_gene_symbol<- sum(is.na(manifest$gene_symbol))
NA_gene_symbol
#
manifest %>%
count(gene_symbol == gene_symbol_old)
manifest %>%
count(gene_symbol == gene_symbol_old)
# Adding an empty column called flag_realignment
manifest %>%
add_column(flag_realignment = NA)
# flag_realignment column now describes whether a probe should be removed, renamed or kept unchanged.
manifest_new <- manifest %>%
mutate(flag_realignment =
# when the new gene symbol is equal to the old one, write "unchanged"
case_when(gene_symbol_old == gene_symbol ~ "unchanged",
# when the new gene symbol is not equal to the old one, write "renamed"
gene_symbol_old != gene_symbol ~ "renamed",
# when the new gene symbol is NA, write "removed"
is.na(gene_symbol) ~ "removed"))
table(manifest$flag_realignment, useNA = "always")
# Adding an empty column called flag_realignment
manifest %>%
add_column(flag_realignment = NA)
# flag_realignment column now describes whether a probe should be removed, renamed or kept unchanged.
manifest_new <- manifest %>%
mutate(flag_realignment =
# when the new gene symbol is equal to the old one, write "unchanged"
case_when(gene_symbol_old == gene_symbol ~ "unchanged",
# when the new gene symbol is not equal to the old one, write "renamed"
gene_symbol_old != gene_symbol ~ "renamed",
# when the new gene symbol is NA, write "removed"
is.na(gene_symbol) ~ "removed"))
# Adding an empty column called flag_realignment
manifest %>%
add_column(flag_realignment = NA)
# flag_realignment column now describes whether a probe should be removed, renamed or kept unchanged.
manifest <- manifest %>%
mutate(flag_realignment =
# when the new gene symbol is equal to the old one, write "unchanged"
case_when(gene_symbol_old == gene_symbol ~ "unchanged",
# when the new gene symbol is not equal to the old one, write "renamed"
gene_symbol_old != gene_symbol ~ "renamed",
# when the new gene symbol is NA, write "removed"
is.na(gene_symbol) ~ "removed"))
table(manifest$flag_realignment, useNA = "always")
# subsetted countData to only show the probes which do not have the tag "removed" in the flag_realignment column of manifest_new
countData <- subset(countData, row.names(countData) %in% manifest$probe_name_old & manifest$flag_realignment != "removed")
# The mutate verb adds a probe_name column. The new probe names are gene_symbol and probe_ID, separated by an underscore.
manifest <- manifest %>%
mutate(probe_name = paste(gene_symbol, probe_ID, sep = "_"))
View(manifest)
countData <- countData %>%
rownames_to_column(var = "probe_name_old") %>%
left_join(y = manifest, by = "probe_name_old")
countData <- countData %>%
# turning the row names (probes) back into a column
rownames_to_column(var = "probe_name_old") %>%
#
left_join(y = manifest, by = "probe_name_old")
countData <- countData %>%
# turning the row names (probes) back into a column
rownames_to_column(var = "probe_name_old") %>%
#
left_join(y = manifest, by= "probe_name_old")
countData <- countData %>%
# turning the row names (probes) back into a column
rownames_to_column(var = "probe_name_old") %>%
#
left_join(y = manifest, by= "probe_name_old") %>%
select(probe_name, all_of(metaData$sample_ID)) %>%
column_to_rownames(var="probe_name")
countData <- countData %>%
# turning the row names (probes) back into a column
rownames_to_column(var = "count_probe_name_old") %>%
#
left_join(y = manifest, by= "probe_name_old") %>%
select(probe_name, all_of(metaData$sample_ID)) %>%
column_to_rownames(var="probe_name")
countData <- countData %>%
# turning the row names (probes) back into a column
rownames_to_column(var = "count_probe_name_old") %>%
#
left_join(y = manifest, by= "count_probe_name_old") %>%
select(probe_name, all_of(metaData$sample_ID)) %>%
column_to_rownames(var="probe_name")
countData <- countData %>%
# turning the row names (probes) back into a column
rownames_to_column(var = "count_probe_name_old") %>%
#
left_join(y = manifest, by= "probe_name_old") %>%
select(probe_name, all_of(metaData$sample_ID)) %>%
column_to_rownames(var="probe_name")
countData <- countData %>%
# turning the row names (probes) back into a column
rownames_to_column(var = "count_probe_name_old") %>%
#
left_join(y = manifest, by= "probe_name_old") %>%
select(manifest$probe_name, all_of(metaData$sample_ID)) %>%
column_to_rownames(var="probe_name")
countData <- countData %>%
# turning the row names (probes) back into a column
rownames_to_column(var = "probe_name_old") %>%
#
left_join(y = manifest, by= "probe_name_old") %>%
select(manifest$probe_name, all_of(metaData$sample_ID)) %>%
column_to_rownames(var="probe_name")
countData <- countData %>%
# turning the row names (probes) back into a column
# rownames_to_column(var = "probe_name_old") %>%
#
left_join(y = manifest, by= "probe_name_old") %>%
select(probe_name, all_of(metaData$sample_ID)) %>%
column_to_rownames(var="probe_name")
countData <- countData %>%
# turning the row names (probes) back into a column
# rownames_to_column(var = "probe_name_old") %>%
#
left_join(y = manifest, by= "probe_name_old") %>%
select(metadata$probe_name, all_of(metaData$sample_ID)) %>%
column_to_rownames(var="probe_name")
countData <- countData %>%
# turning the row names (probes) back into a column
# rownames_to_column(var = "probe_name_old") %>%
#
left_join(y = manifest, by= "probe_name_old") %>%
select(manifest$probe_name, all_of(metaData$sample_ID)) %>%
column_to_rownames(var="probe_name")
countData <- countData %>%
# turning the row names (probes) back into a column
# rownames_to_column(var = "probe_name_old") %>%
#
left_join(y = manifest, by= "probe_name_old") %>%
select(probe_name, all_of(metaData$sample_ID)) %>%
column_to_rownames(var="probe_name")
# The mutate verb adds a probe_name column. The new probe names are gene_symbol and probe_ID, separated by an underscore.
manifest <- manifest %>%
mutate(probe_name = paste(gene_symbol, probe_ID, sep = "_"))
countData <- countData %>%
# turning the row names (probes) back into a column
# rownames_to_column(var = "probe_name_old") %>%
#
left_join(y = manifest, by= "probe_name_old") %>%
select(probe_name, all_of(metaData$sample_ID)) %>%
column_to_rownames(var="probe_name")
countData <- countData %>%
# turning the row names (probes) back into a column
# rownames_to_column(var = "probe_name_old") %>%
#
left_join(y = manifest, by= "probe_name_old") %>%
select(manifest$probe_name, all_of(metaData$sample_ID)) %>%
column_to_rownames(var="probe_name")
countData <- countData %>%
# turning the row names (probes) back into a column
# rownames_to_column(var = "probe_name_old") %>%
#
left_join(y = manifest, by= "probe_name_old") %>%
select(probe_name, all_of(metaData$sample_ID)) %>%
column_to_rownames(var="probe_name")
View(countData)
countData <- countData %>%
# turning the row names (probes) back into a column
# rownames_to_column(var = "probe_name_old") %>%
#
left_join(y = manifest, by= "probe_name_old") %>%
select(probe_name_old, all_of(metaData$sample_ID)) %>%
column_to_rownames(var="probe_name")
countData <- countData %>%
# turning the row names (probes) back into a column
# rownames_to_column(var = "probe_name_old") %>%
#
left_join(y = manifest, by= "probe_name_old") %>%
select(probe_name_old, all_of(metaData$sample_ID)) %>%
column_to_rownames(var="probe_name_old")
isTRUE(countData == countData_original)
test <- subset(countData_original, row.names(countData_original) %in% manifest$probe_name_old & manifest$flag_realignment != "removed")
isTRUE(test == countData)
