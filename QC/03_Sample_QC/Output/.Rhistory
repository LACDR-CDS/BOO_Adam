#
rm(list=ls())
#
root_dir <- "C:/Users/mmpse/Documents/GitHub/BOO-Adam/QC/03_Sample_QC/"
count_path <- "Input/countData.Rdata"
cpm_path <- "Input/cpmData.Rdata"
metadata_path <- "Input/metaData.Rdata"
count_store <- "Output/countData.Rdata"
cpm_store <- "Output/cpmData.Rdata"
metadata_store <- "Output/metaData.Rdata"
# Set count threshold to 600,000 - this is the minimum library size a sample needs to have. Including smaller samples would provide more unreliable data, as a small change in gene expression might look like a large effect.
count_threshold <- 6E5
# Set correlation threshold to 0.9 - it is important for the quality of the analysis that replicates of the same condition are correlated with each other
corr_threshold <- 0.9
#
library(tidyverse)
library(ggrepel)
#
load(paste0(root_dir, count_path))
load(paste0(root_dir, cpm_path))
load(paste0(root_dir, metadata_path))
#
load(paste0(root_dir, count_path))
load(paste0(root_dir, cpm_path))
load(paste0(root_dir, metadata_path))
metadata_path <- "Input/metaData.Rdata"
metadata_store <- "Output/metaData.Rdata"
#
load(paste0(root_dir, count_path))
load(paste0(root_dir, cpm_path))
load(paste0(root_dir, metadata_path))
#
table(metaData$sample_ID == colnames(countData))
#
summary(metaData$lib_size)
# setting the library size as the total counts per sample of the updated countData
metaData$lib_size <- colSums(countData)
summary(metaData$lib_size)
#
metaData %>%
# Create a histogram of library size
ggplot(aes(x = lib_size)) +
geom_histogram(fill = "lightblue", color = "black", bins = 30) +
ggtitle("Histogram of library size values") +
xlab("Library size") +
theme_bw()
#
metaData %>%
# Create a histogram of library size
ggplot(aes(x = lib_size)) +
geom_histogram(fill = "lightblue", color = "black", bins = 20) +
ggtitle("Histogram of library size values") +
xlab("Library size") +
theme_bw()
#
metaData %>%
# Create a histogram of library size
ggplot(aes(x = lib_size)) +
geom_histogram(fill = "lightblue", color = "black", bins = 40) +
ggtitle("Histogram of library size values") +
xlab("Library size") +
theme_bw()
#
metaData %>%
# Create a histogram of library size
ggplot(aes(x = lib_size)) +
geom_histogram(fill = "lightblue", color = "black", bins = 30) +
ggtitle("Histogram of library size values") +
xlab("Library size") +
theme_bw()
metaData <- metaData %>%
# A column called flagLowReads is added to the metadata, which tells the reader whether or not the sample library size is above the threshold.
mutate(flagLowReads = ifelse(lib_size <= count_threshold, T, F))
table(metaData$flagLowReads)
#
metaData %>%
# concentration ID is made into a factor, so it can be used to color the boxplot by
mutate(conc_ID = factor(conc_ID)) %>%
# library size is plotted against compound ID; we want to view the library size per condition
ggplot(aes(x=compound_ID, y=lib_size)) +
# The plot is colored by concentration
geom_boxplot(aes(color=conc_ID), width=0.8) +
# A dashed line is drawn at the minimum library size of 600000 counts.
geom_hline(aes(yintercept=count_threshold), color="black", linetype="dashed") +
#
geom_text_repel(aes(x = compound_ID, y = lib_size, color = conc_ID),
label=ifelse(metaData$lib_size < count_threshold,
metaData$rep, "")) +
#
xlab("") + ylab("Library size") + ggtitle("Library size distributions") +
theme_bw()
#
metaData %>%
# concentration ID is made into a factor, so it can be used to color the boxplot by
mutate(conc_ID = factor(conc_ID)) %>%
# library size is plotted against compound ID; we want to view the library size per condition
ggplot(aes(x=compound_ID, y=lib_size)) +
# The plot is colored by concentration
geom_boxplot(aes(color=conc_ID), width=0.8) +
# A dashed line is drawn at the minimum library size of 600000 counts.
geom_hline(aes(yintercept=count_threshold), color="black", linetype="dashed") +
#
#geom_text_repel(aes(x = compound_ID, y = lib_size, color = conc_ID),
# label=ifelse(metaData$lib_size < count_threshold,
#    metaData$rep, "")) +
#
xlab("") + ylab("Library size") + ggtitle("Library size distributions") +
theme_bw()
#
metaData %>%
# concentration ID is made into a factor, so it can be used to color the boxplot by
mutate(conc_ID = factor(conc_ID)) %>%
# library size is plotted against compound ID; we want to view the library size per condition
ggplot(aes(x=compound_ID, y=lib_size)) +
# The plot is colored by concentration
geom_boxplot(aes(color=conc_ID), width=0.8) +
# A dashed line is drawn at the minimum library size of 600000 counts.
geom_hline(aes(yintercept=count_threshold), color="black", linetype="dashed") +
#
geom_text_repel(aes(x = compound_ID, y = lib_size, color = conc_ID),
label=ifelse(metaData$lib_size < count_threshold,
metaData$rep, "")) +
#
xlab("") + ylab("Library size") + ggtitle("Library size distributions") +
theme_bw()
#
metaData %>%
# concentration ID is made into a factor, so it can be used to color the boxplot by
mutate(conc_ID = factor(conc_ID)) %>%
# library size is plotted against compound ID; we want to view the library size per condition
ggplot(aes(x=compound_ID, y=lib_size)) +
# The plot is colored by concentration
geom_boxplot(aes(color=conc_ID), width=0.8) +
# A dashed line is drawn at the minimum library size of 600000 counts.
geom_hline(aes(yintercept=count_threshold), color="black", linetype="dashed") +
# values below the threshold are labelled
geom_text_repel(aes(x = compound_ID, y = lib_size, color = conc_ID),
label=ifelse(metaData$lib_size < count_threshold,
metaData$rep, "")) +
xlab("") + ylab("Library size") + ggtitle("Library size distributions per condition") +
theme_bw()
# the log2(cpm + 1) is calculated
logcpmData <- log2(cpmData + 1)
View(logcpmData)
# A data frame is made for the output of the replicate filter
replicateFilterOutput <- data.frame()
# A loop is made with an iteration for each unique condition
for(i in unique(metaData$mean_ID)){
# The metadata is filtered to only show data from the current mean_id
metaDataReps <- metaData %>%
filter(mean_ID == i)
# The repetitions from the current mean_id are subsetted out of the logcpmdata
cpmDataReps <- logcpmData[, metaDataReps$sample_ID]
# loop through each column of the cpmdata rows that were selected in the previous line
for(j in 1:ncol(cpmDataReps)){
# in a pairwise fashion (comparing the replicates with each other in pairs)
for(k in 1:ncol(cpmDataReps)){
# save the two selected replicates as variables
sample_A <- colnames(cpmDataReps)[j]
sample_B <- colnames(cpmDataReps)[k]
# the correlation between identical replicates does not need to be calculated (do not compare a sample with itself)
if(sample_A != sample_B){
# calculate pairwise correlation and put it into a variable called r2
r2 <- cor(cpmDataReps[,j], cpmDataReps[,k])
# put the results of the calculation into the replicateFilterOutput dataframe
replicateFilterOutput <- rbind(
replicateFilterOutput,
data.frame(mean_ID = i,
sample_A = sample_A,
sample_B = sample_B,
r2 = r2))
}
}
}
}
# show the first rows of the dataframe
head(replicateFilterOutput)
replicateFilterOutput <- replicateFilterOutput %>%
# the sample name is changed to compound name _ concentration ID (plate and replicate number are removed from the name)
separate(sample_A,
into = c("Compound", "Conc_ID", NA, NA),
remove = F,
sep = "_") %>%
# compound column is added.
mutate(Compound =
# if the compound name is DMSO
ifelse(grepl("DMSO", Compound),
# select only the first 5 letters (in order to not get separations between the samples in the same DMSO level)
substr(Compound,1,5), Compound)) %>%
# group by condition
group_by(sample_A) %>%
# save the maximum pairwise correlation between replicates of that condition
mutate(max_r2 = max(r2, na.rm = T)) %>%
# ungroup the dataframe in order to avoid errors later on
ungroup()
# inspect the maximum correlations between replicates
summary(replicateFilterOutput$max_r2)
View(replicateFilterOutput)
replicateFilterOutput %>%
# pairwise correlation between replicates is plotted into a boxplot per condition
ggplot(aes(x = sample_A, y = r2)) +
geom_boxplot(color = "grey60") +
# with points at the actual pairwise correlation values
geom_point(color = "black", size = 0.5) +
# where the point describing the highest pairwise correlation level for each condition is colored, with a different color for eash concentration level
geom_point(aes(y = max_r2, color = Conc_ID),
size = 1.5) +
# a dashed line is added at the correlation threshold value of 0.9
geom_hline(aes(yintercept = corr_threshold),
color = "red", linetype = "dashed") +
ylab("") + xlab("Sample ID") + ggtitle("Replicate correlations") +
theme_bw() +
# sample names are not printed
theme(axis.text.x = element_blank()) +
# each compound gets a different plot, with an x-axis that fits the plot
facet_wrap(~Compound, scales='free_x', nrow=2)
replicateFilterOutput %>%
# pairwise correlation between replicates is plotted into a boxplot per condition
ggplot(aes(x = sample_A, y = r2)) +
geom_boxplot(color = "grey60") +
# with points at the actual pairwise correlation values
geom_point(color = "black", size = 0.5) +
# where the point describing the highest pairwise correlation level for each condition is colored, with a different color for eash concentration level
geom_point(aes(y = max_r2, color = Conc_ID),
size = 1.5) +
# a dashed line is added at the correlation threshold value of 0.9
geom_hline(aes(yintercept = corr_threshold),
color = "red", linetype = "dashed") +
ylab("") + xlab("Sample ID") + ggtitle("Replicate correlations") +
theme_bw() +
# sample names are not printed
#theme(axis.text.x = element_blank()) +
# each compound gets a different plot, with an x-axis that fits the plot
facet_wrap(~Compound, scales='free_x', nrow=2)
replicateFilterOutput %>%
# pairwise correlation between replicates is plotted into a boxplot per condition
ggplot(aes(x = sample_A, y = r2)) +
geom_boxplot(color = "grey60") +
# with points at the actual pairwise correlation values
geom_point(color = "black", size = 0.5) +
# where the point describing the highest pairwise correlation level for each condition is colored, with a different color for eash concentration level
geom_point(aes(y = max_r2, color = Conc_ID),
size = 1.5) +
# a dashed line is added at the correlation threshold value of 0.9
geom_hline(aes(yintercept = corr_threshold),
color = "red", linetype = "dashed") +
ylab("") + xlab("Sample ID") + ggtitle("Replicate correlations") +
theme_bw() +
# sample names are not printed (they are not readable when printed, and are not necessary for the clarity of the plot)
theme(axis.text.x = element_blank()) +
# each compound gets a different plot, with an x-axis that fits the plot
facet_wrap(~Compound, scales='free_x', nrow=2)
# the maximum correlation between replicates is filtered for each condition and saved into a new variable
replicateFilterMerge <- replicateFilterOutput %>%
select(sample_ID = sample_A, max_r2) %>%
# for each unique condition
distinct()
# the new variable is added to the metadata file, by sample ID -> the metadata now shows the maximum correlation level for each sample.
metaData <- left_join(metaData, replicateFilterMerge,
by = "sample_ID") %>%
# a new column is added, which shows if the maximum correlation levels are above the threshold value of 0.9.
mutate(flagLowCorr = ifelse(max_r2 <= corr_threshold, T, F))
table(metaData$flagLowCorr)
# metadata is subsetted to only show the samples that aren't flagged. this is only the high quality data.
metaData <- metaData %>%
filter(!flagLowReads & !flagLowCorr)
# countdata and cpmdata are subsetted to only show the samples that are in the updated metadata file
cpmData <- cpmData[ , metaData$sample_ID]
countData <- countData[ , metaData$sample_ID]
# dimensions of the new metadata file are checked (should be 66/32 because no samples were flagged)
dim(metaData)
save(metaData, file=paste0(root_dir, metadata_store))
save(cpmData, file=paste0(root_dir, cpm_store))
save(countData, file=paste0(root_dir, count_store))
devtools::session_info()
