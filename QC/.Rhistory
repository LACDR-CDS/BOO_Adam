#
ls()
# Installing and loading tidyverse package, loading dplyr package
install.packages("tidyverse")
library(tidyverse)
library(dplyr)
# Variables set to make it easier to refer to files more easily.
root_dir <- "C:/Users/mmpse/Universiteit Leiden/BOO 2025 - BOO CDS Giulia team - BOO CDS Giulia team/Students/Adam/Project/QC/"
count_path <- "Input/countData.txt"
metadata_path <- "Input/metaData.txt"
# Reading the data. metadata indeed has a row for each of the sample columns in countdata.
countData <- read_tsv(paste0(root_dir, count_path))
metaData <- read_tsv(paste0(root_dir, metadata_path))
# sample_ID: gives sample ID corresponding to samples in countData.
# sample_type: mentions if it is a sample treated with chemicals, or a control sample
# compound_ID: mentions the compound or DMSO level sample was treated with
# compound_CAS: CAS code for compound used
# compound_name: name of compound used
# compound_abbr: abbreviated compound name
# mean_ID: compound_concentration_plate
# mean_ID_control: mean_ID of the control conditions used for this sample; NA for control sample rows
# control_type: indicates if a low or high level of DMSO was used in the control; NA for control sample rows
# conc_ID: indicates concentration level of the chemicals.
# conc_amt: indicates concentration of the chemicals in the sample
# conc_unit: unit for conc_amt
# conc_max: maximum concentration used
# conc_min: minimum concentration used
# rep: indicates repetition
# lib_size: library size
# read_depth: ?
# plate_ID: which plate the sample was on
# plate_well: which well the sample was in
# plate_row: which row the sample was in
# plate_col: which column the sample was in
# batch: ?
# timepoint: time at which data was gathered
# cell_type: cell type
# compound_class: high or low tox
# LOAEL_amt and LOAEL unit: LOAEL from animal studies and unit
# PBPK_equivalent: ?
# PBPK_serum_level: ?
metaData
# All data was profiled from PHH cells.
metaData$cell_type
# There are 42 rows for Treatment, and 24 rows for Control. This means that there are 42 treatment samples and 24 control samples.
metaData %>%
filter(sample_type == "Treatment")
metaData %>%
filter(sample_type == "Control")
# Treated samples have been exposed to propylene carbonate and triazinetriethanol at concentrations of 0.03, 0.30, 1.00, 3.10, 10.00, 32.00 and 180.00 ÂµM.
# Control samples have been exposed to either a high or a low concentration of DMSO.
metaData$compound_name
metaData$compound_ID
metaData$conc_amt
metaData$conc_unit
# There are 3 replicates for each condition.
metaData$rep
# The two treatment compounds are on different plates. This could lead to biased results, as the plates might have been exposed to slightly different conditions. However, the control samples are also plated on two different plates. This way, the data can be normalized correctly and an unbiased analysis can be performed.
metaData$plate_ID
# The samples without a toxicity class are the DMSO control samples. They are not treated with a chemical, so it is logical that they do not have a compound toxicity class.
metaData$compound_class %>%
is.na()
# The samples were collected after 24 hours.
metaData$timepoint
# Each sample has a unique identifier.
metaData$sample_ID
# Probe names were first read as another column, but they are row names. So, the column was converted to row names.
countData_proberows <- countData %>%
column_to_rownames(var = "Probe")
countData_proberows
# First: subsetted the control samples from the metadata. Then, selected the column titles corresponding to the sample_IDs from the subsetted metadata.
ctrl_metaData <- subset(metaData, sample_type == "Control")
ctrl_countData <- select(countData_proberows, ctrl_metaData$sample_ID)
ctrl_countData
# This function checks if all of the values of the sample_ID column in the metadata are exactly equal to the column names of the countdata. not using the adjusted countdata (with probes as row names) results in an error.
all.equal(metaData$sample_ID, colnames(countData_proberows))
#
#
#
install.packages("tidyverse")
# Variables set to make it easier to refer to files more easily.
root_dir <- "C:/Users/mmpse/Universiteit Leiden/BOO 2025 - BOO CDS Giulia team - BOO CDS Giulia team/Students/Adam/Project/QC/"
count_path <- "Input/countData.txt"
metadata_path <- "Input/metaData.txt"
# Reading the data. metadata indeed has a row for each of the sample columns in countdata.
countData <- read_tsv(paste0(root_dir, count_path))
metaData <- read_tsv(paste0(root_dir, metadata_path))
# sample_ID: gives sample ID corresponding to samples in countData.
# sample_type: mentions if it is a sample treated with chemicals, or a control sample
# compound_ID: mentions the compound or DMSO level sample was treated with
# compound_CAS: CAS code for compound used
# compound_name: name of compound used
# compound_abbr: abbreviated compound name
# mean_ID: compound_concentration_plate
# mean_ID_control: mean_ID of the control conditions used for this sample; NA for control sample rows
# control_type: indicates if a low or high level of DMSO was used in the control; NA for control sample rows
# conc_ID: indicates concentration level of the chemicals.
# conc_amt: indicates concentration of the chemicals in the sample
# conc_unit: unit for conc_amt
# conc_max: maximum concentration used
# conc_min: minimum concentration used
# rep: indicates repetition
# lib_size: library size
# read_depth: ?
# plate_ID: which plate the sample was on
# plate_well: which well the sample was in
# plate_row: which row the sample was in
# plate_col: which column the sample was in
# batch: ?
# timepoint: time at which data was gathered
# cell_type: cell type
# compound_class: high or low tox
# LOAEL_amt and LOAEL unit: LOAEL from animal studies and unit
# PBPK_equivalent: ?
# PBPK_serum_level: ?
metaData
# Probe names were first read as another column, but they are row names. So, the column was converted to row names.
countData_proberows <- countData %>%
column_to_rownames(var = "Probe")
countData_proberows
# Probe names were first read as another column, but they are row names. So, the column was converted to row names.
countData <- countData %>%
column_to_rownames(var = "Probe")
countData_proberows
# First: subsetted the control samples from the metadata. Then, selected the column titles corresponding to the sample_IDs from the subsetted metadata.
ctrl_metaData <- subset(metaData, sample_type == "Control")
ctrl_countData <- select(countData_proberows, ctrl_metaData$sample_ID)
ctrl_countData
# This function checks if all of the values of the sample_ID column in the metadata are exactly equal to the column names of the countdata. not using the adjusted countdata (with probes as row names) results in an error.
all.equal(metaData$sample_ID, colnames(countData_proberows))
# First: subsetted the control samples from the metadata. Then, selected the column titles corresponding to the sample_IDs from the subsetted metadata.
ctrl_metaData <- subset(metaData, sample_type == "Control")
ctrl_countData <- select(countData, ctrl_metaData$sample_ID)
ctrl_countData
# Probe names were first read as another column, but they are row names. So, the column was converted to row names.
countData <- countData %>%
column_to_rownames(var = "Probe")
#
save(countData)
#
save(file = countData)
#
save(countData, file = "countData.Rdata")
#
save(countData, file = "countData.Rdata")
save(metaData, file = "metaData.Rdata")
#
save(countData, file = "Output/countData.Rdata")
save(metaData, file = "Output/metaData.Rdata")
#
session_info()
#
sessioninfo()
#
session.info()
#
session_info()
#
install(sessioninfo)
#
install.packages("sessioninfo")
#
install.packages("sessioninfo")
library(sessioninfo)
#
install.packages("sessioninfo")
library(sessioninfo)
session_info
install.packages("sessioninfo")
#
library(sessioninfo)
session_info
#
library(sessioninfo)
session_info()
#
ls()
#
ls()
# Loading tidyverse and dplyr packages
library(tidyverse)
library(dplyr)
count_path <- "Input/countData.txt"
metadata_path <- "Input/metaData.txt"
# Reading the data. metadata indeed has a row for each of the sample columns in countdata.
countData <- read_tsv(paste0(root_dir, count_path))
# Reading the data. metadata indeed has a row for each of the sample columns in countdata.
countData <- read_tsv(paste0(count_path))
setwd("~/GitHub/BOO-Adam")
# Reading the data. metadata indeed has a row for each of the sample columns in countdata.
countData <- read_tsv(paste0(count_path))
# Variables set to make it easier to refer to files more easily.
root_dir <- "C:/Users/mmpse/Documents/GitHub/BOO-Adam/QC"
count_path <- "Input/countData.txt"
metadata_path <- "Input/metaData.txt"
# Reading the data. metadata indeed has a row for each of the sample columns in countdata.
countData <- read_tsv(paste0(root_dir, count_path))
# Variables set to make it easier to refer to files more easily.
root_dir <- "C:/Users/mmpse/Documents/GitHub/BOO-Adam/QC/"
# Reading the data. metadata indeed has a row for each of the sample columns in countdata.
countData <- read_tsv(paste0(root_dir, count_path))
metaData <- read_tsv(paste0(root_dir, metadata_path))
# plate_well: which well the sample was in
# plate_row: which row the sample was in
# plate_col: which column the sample was in
# batch: batch number
# timepoint: time at which data was gathered
# cell_type: cell type
# compound_class: high or low tox
# LOAEL_amt and LOAEL unit: LOAEL from animal studies and unit
# PBPK_equivalent: concentration in microM that is needed for that chemical for that LOAEL? -> check with Lucy
# PBPK_serum_level: ?
metaData
# All data was profiled from PHH cells.
metaData$cell_type
# There are 42 rows for Treatment, and 24 rows for Control. This means that there are 42 treatment samples and 24 control samples.
metaData %>%
filter(sample_type == "Treatment")
metaData %>%
filter(sample_type == "Control")
# Treated samples have been exposed to propylene carbonate and triazinetriethanol at concentrations of 0.03, 0.30, 1.00, 3.10, 10.00, 32.00 and 180.00 ÂµM.
# Control samples have been exposed to either a high or a low concentration of DMSO.
metaData$compound_name
metaData$compound_ID
metaData$conc_amt
metaData$conc_unit
# There are 3 replicates for each condition.
metaData$rep
# The two treatment compounds are on different plates. This could lead to biased results, as the plates might have been exposed to slightly different conditions. However, the control samples are also plated on two different plates. This way, the data can be normalized correctly and an unbiased analysis can be performed.
metaData$plate_ID
# The samples without a toxicity class are the DMSO control samples. They are not treated with a chemical, so it is logical that they do not have a compound toxicity class.
metaData$compound_class %>%
is.na()
# The samples without a toxicity class are the DMSO control samples. They are not treated with a chemical, so it is logical that they do not have a compound toxicity class.
metaData %>%
is.na(compound_class)
# The samples without a toxicity class are the DMSO control samples. They are not treated with a chemical, so it is logical that they do not have a compound toxicity class.
metaData$compound_class %>%
is.na()
# The samples were collected after 24 hours.
metaData$timepoint
# Each sample has a unique identifier.
metaData$sample_ID
# Probe names were first read as another column, but they are row names. So, the column was converted to row names.
column_to_rownames(countData, var = "Probe")
countData
countData
# Probe names were first read as another column, but they are row names. So, the column was converted to row names.
countdata <- column_to_rownames(countData, var = "Probe")
countData
# Probe names were first read as another column, but they are row names. So, the column was converted to row names.
countdata <- column_to_rownames(countData, var = "Probe")
# Probe names were first read as another column, but they are row names. So, the column was converted to row names.
countData <- countData %>%
column_to_rownames(var = "Probe")
countData
# First: subsetted the control samples from the metadata. Then, selected the column titles corresponding to the sample_IDs from the subsetted metadata.
ctrl_metaData <- subset(metaData, sample_type == "Control")
ctrl_countData <- select(countData, ctrl_metaData$sample_ID)
ctrl_countData
# This function checks if all of the values of the sample_ID column in the metadata are exactly equal to the column names of the countdata. not using the adjusted countdata (with probes as row names) results in an error.
all.equal(metaData$sample_ID, colnames(countData))
#
save(countData, file = "Output/countData.Rdata")
#
save(countData, file = "Output/countData.Rdata")
#
save(countData, file = root_dir, "Output/countData.Rdata")
#
save(countData, file = "Output/countData.Rdata")
#
save(countData, root_dir/Output)
#
save(countData, "Output/countData.Rdata")
#
save(countData, "C:/Users/mmpse/Documents/GitHub/BOO-Adam/QC/Output/countData.Rdata")
#
save(countData, "C:/Users/mmpse/Documents/GitHub/BOO-Adam/QC/Output")
setwd("~/GitHub/BOO-Adam")
#
save(countData, "QC/Output/countData.Rdata")
#
save(countData, "QC/Output")
#
save(countData, file = "countData.Rdata")
save(metaData, file = "metaData.Rdata")
#
library(sessioninfo)
session_info()
