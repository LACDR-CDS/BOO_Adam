rm(list = ls())
root_dir <- "C:/Users/mmpse/Documents/GitHub/BOO-Adam/DEG/"
count_path <- "Input/countData.Rdata"
metadata_path <- "Input/metaData.Rdata"
low_store <- "Output/DEGres_low.Rdata"
high_store <- "Output/DEGres_high.Rdata"
#
library(tidyverse)
library(ggrepel)
library(DESeq2)
#
load(paste0(root_dir, count_path))
load(paste0(root_dir, metadata_path))
# Selecting the experimental conditions and their control conditions from the metadata
metaData %>%
select(mean_ID, mean_ID_control) %>%
# Filtering out the NA values (= untreated cells) from the selected data, do not show duplicate values
filter(!is.na(mean_ID_control)) %>%
distinct()
# Filtering out NA values (DMSO-treated samples) in the mean_ID_control column, selecting the same columns from the metadata as in the previous chunks, changing the compound_ID column name to file_ID
contrast <- metaData %>%
filter(!is.na(mean_ID_control)) %>%
select(mean_ID, mean_ID_control, file_ID = compound_ID) %>%
distinct
contrast
# Subsetting the low toxicity (propylene carbonate) data from the contrast dataframe
contrast_low <- contrast %>%
filter(file_ID == "CS1104")
contrast_low
#
levels <- unique(contrast_low$mean_ID)
levels
# the first low tox concentration level is stored in variable i
i <- levels[1]
i
# The first concentration level is subsetted from the contrast_low dataframe
contrast_sub <- contrast_low %>%
filter(mean_ID == i)
contrast_sub
# The first concentration level is subsetted from the contrast_low dataframe
contrast_sub <- contrast_low %>%
filter(mean_ID == i)
contrast_sub
# And from the metadata
metaData_sub <- metaData %>%
filter(mean_ID %in% c(contrast_sub$mean_ID, contrast_sub$mean_ID_control))
metaData_sub
# The first concentration level is subsetted from the contrast_low dataframe
contrast_sub <- contrast_low %>%
filter(mean_ID == i)
contrast_sub
# The samples treated with the first concentration level and their controls are subsetted from the metadata
metaData_sub <- metaData %>%
filter(mean_ID %in% c(contrast_sub$mean_ID, contrast_sub$mean_ID_control))
metaData_sub
# And from the countdata
countData_sub <- countData[ , metaData_sub$sample_ID]
countData_sub[1:10, ]
# A DESeq object is made with data from the subsetted countdata and metadata
dds <- DESeqDataSetFromMatrix(
countData = countData_sub,
colData = metaData_sub,
# Data will be compared by mean_ID
design = ~ mean_ID
)
#
dds <- DESeq(dds)
dds
# Applying shrinkage. This way, extreme or noisy values will not have big influences on the data, and the results will be more reliable.
res_low <- lfcShrink(dds,
contrast = c("mean_ID",
contrast_sub$mean_ID,
contrast_sub$mean_ID_control),
type="normal")
head(res_low)
# res_low is turned into a dataframe
res_low <- data.frame(res_low) %>%
# The rownames are turned into a column called gene_symbol
rownames_to_column(var = "gene_symbol") %>%
# Columns containing the mean_ID and the mean_ID_control, as found in contrast_sub, are added.
mutate(
mean_ID = contrast_sub$mean_ID,
mean_ID_control = contrast_sub$mean_ID_control
)
head(res_low)
# The stept completed in the previous chunks are repeated with help of a loop for each concentration level other than the first.
for(i in levels[-1]){
# Creating a contrast dataset and subsetting the metadata and countdata
contrast_sub <- contrast_low %>%
filter(mean_ID == i)
metaData_sub <- metaData %>%
filter(mean_ID %in% c(contrast_sub$mean_ID, contrast_sub$mean_ID_control))
countData_sub <- countData[ , metaData_sub$sample_ID]
# Creating a DESeq dataset from the subsetted data
dds <- DESeqDataSetFromMatrix(
countData = countData_sub,
colData = metaData_sub,
design = ~ mean_ID)
# The DESeq function is applied
dds <- DESeq(dds)
# Normal shrinkage is applied
res_low <- rbind(res_low,
data.frame(lfcShrink(dds,
contrast = c("mean_ID",
contrast_sub$mean_ID,
contrast_sub$mean_ID_control),
type="normal")) %>%
# The data is turned into a clear dataframe, with columns describing the treatment condition and the control condition it was compared to
rownames_to_column(var = "gene_symbol") %>%
mutate(
mean_ID = contrast_sub$mean_ID,
mean_ID_control = contrast_sub$mean_ID_control))
}
View(res_low)
rm(list = ls())
root_dir <- "C:/Users/mmpse/Documents/GitHub/BOO-Adam/DEG/"
count_path <- "Input/countData.Rdata"
metadata_path <- "Input/metaData.Rdata"
low_store <- "Output/DEGres_low.Rdata"
moderate_store <- "Output/DEGres_moderate.Rdata"
#
library(tidyverse)
library(ggrepel)
library(DESeq2)
#
load(paste0(root_dir, count_path))
load(paste0(root_dir, metadata_path))
# Selecting the experimental conditions and their control conditions from the metadata
metaData %>%
select(mean_ID, mean_ID_control) %>%
# Filtering out the NA values (= untreated cells) from the selected data, do not show duplicate values
filter(!is.na(mean_ID_control)) %>%
distinct()
# Filtering out NA values (DMSO-treated samples) in the mean_ID_control column, selecting the same columns from the metadata as in the previous chunks, changing the compound_ID column name to file_ID
contrast <- metaData %>%
filter(!is.na(mean_ID_control)) %>%
select(mean_ID, mean_ID_control, file_ID = compound_ID) %>%
distinct
contrast
# Subsetting the low toxicity (propylene carbonate) data from the contrast dataframe
contrast_low <- contrast %>%
filter(file_ID == "CS1104")
contrast_low
# Contrast_low is separated into concentration levels
levels <- unique(contrast_low$mean_ID)
levels
# The first low tox concentration level is stored in variable i
i <- levels[1]
i
# The first concentration level is subsetted from the contrast_low dataframe
contrast_sub <- contrast_low %>%
filter(mean_ID == i)
contrast_sub
# The samples treated with the first concentration level and their controls are subsetted from the metadata
metaData_sub <- metaData %>%
filter(mean_ID %in% c(contrast_sub$mean_ID, contrast_sub$mean_ID_control))
metaData_sub
# And from the countdata
countData_sub <- countData[ , metaData_sub$sample_ID]
countData_sub[1:10, ]
# A DESeq object is made with data from the subsetted countdata and metadata
dds <- DESeqDataSetFromMatrix(
countData = countData_sub,
colData = metaData_sub,
# Data will be compared by mean_ID
design = ~ mean_ID
)
# The DESeq function is applied to the DESeq object dds
dds <- DESeq(dds)
dds
# Applying shrinkage. This way, extreme or noisy values will not have big influences on the data, and the results will be more reliable.
res_low <- lfcShrink(dds,
contrast = c("mean_ID",
contrast_sub$mean_ID,
contrast_sub$mean_ID_control),
type="normal")
head(res_low)
# res_low is turned into a dataframe
res_low <- data.frame(res_low) %>%
# The rownames are turned into a column called gene_symbol
rownames_to_column(var = "gene_symbol") %>%
# Columns containing the mean_ID (which treatment condition the sample was taken from) and the mean_ID_control (which control condition the sample was compared to), as found in contrast_sub, are added.
mutate(
mean_ID = contrast_sub$mean_ID,
mean_ID_control = contrast_sub$mean_ID_control
)
head(res_low)
# The stept completed in the previous chunks are repeated with help of a loop for each concentration level other than the first.
for(i in levels[-1]){
# Creating a contrast dataset and subsetting the metadata and countdata
contrast_sub <- contrast_low %>%
filter(mean_ID == i)
metaData_sub <- metaData %>%
filter(mean_ID %in% c(contrast_sub$mean_ID, contrast_sub$mean_ID_control))
countData_sub <- countData[ , metaData_sub$sample_ID]
# Creating a DESeq dataset from the subsetted data
dds <- DESeqDataSetFromMatrix(
countData = countData_sub,
colData = metaData_sub,
design = ~ mean_ID)
# The DESeq function is applied
dds <- DESeq(dds)
# Normal shrinkage is applied
res_low <- rbind(res_low,
data.frame(lfcShrink(dds,
contrast = c("mean_ID",
contrast_sub$mean_ID,
contrast_sub$mean_ID_control),
type="normal")) %>%
# The data is turned into a clear dataframe, with columns describing the treatment condition and the control condition it was compared to
rownames_to_column(var = "gene_symbol") %>%
mutate(
mean_ID = contrast_sub$mean_ID,
mean_ID_control = contrast_sub$mean_ID_control))
}
# Inspecting the data
head(res_low)
dim(res_low)
#
contrast_moderate <- contrast %>%
filter(file_ID == "CS1127")
contrast_moderate
# A contrast dataframe is made, containing the treatment conditions for the moderate toxicity compound and the control conditions they are to be compared to
contrast_moderate <- contrast %>%
filter(file_ID == "CS1127")
contrast_moderate
levels <- unique(contrast_high$mean_ID)
levels <- unique(contrast_moderate$mean_ID)
levels
# The function of this loop is the same as the loop for the low toxicity compound.
res_moderate <- data.frame()
for(i in levels){
contrast_sub <- contrast_moderate %>%
filter(mean_ID == i)
metaData_sub <- metaData %>%
filter(mean_ID %in% c(contrast_sub$mean_ID, contrast_sub$mean_ID_control))
countData_sub <- countData[ , metaData_sub$sample_ID]
dds <- DESeqDataSetFromMatrix(
countData = countData_sub,
colData = metaData_sub,
design = ~ mean_ID)
dds <- DESeq(dds)
res_moderate <- rbind(res_moderate,
data.frame(lfcShrink(dds,
contrast = c("mean_ID",
contrast_sub$mean_ID,
contrast_sub$mean_ID_control),
type="normal")) %>%
rownames_to_column(var = "gene_symbol") %>%
mutate(
mean_ID = contrast_sub$mean_ID,
mean_ID_control = contrast_sub$mean_ID_control))
}
# Inspecting the output
head(red_moderate)
# Inspecting the output
head(res_moderate)
dim(res_moderate)
# Inspecting the output
head(res_moderate)
dim(res_moderate)
res_low <- res_low %>%
mutate(
# dir describes whether the log2 fold change has gone up (>0) or down (<0) -> the direction (dir) of the change
dir = ifelse(log2FoldChange < 0, "Down", "Up"),
# sig describes whether the change is both significant and large enough. If the adjusted p value is equal to or lower than 0.05, AND the absolute log2 fold change is greater than 1.2, the column will return TRUE. Otherwise, it will return FALSE.
sig = ifelse(padj <= 0.05 & abs(log2FoldChange) > log2(1.2), TRUE, FALSE)
)
table(res_low$sig, res_low$dir, useNA="always")
res_moderate <- res_moderate %>%
mutate(
dir = ifelse(log2FoldChange < 0, "Down", "Up"),
sig = ifelse(padj <= 0.05 & abs(log2FoldChange) > log2(1.2), TRUE, FALSE)
)
table(res_moderate$sig, res_moderate$dir, useNA="always")
save(res_low, file=paste0(root_dir, low_store))
save(res_moderate, file=paste0(root_dir, moderate_store))
save(res_moderate, file=paste0(root_dir, moderate_store))
# Moderate and low toxicity compounds are combined into one dataframe, for easier analysis
res <- rbind(res_moderate, res_low)
# A dataframe is created with only the mean_ID and the direction. NA values are filtered out.
plot_df <- res %>%
filter(!is.na(dir)) %>%
select(mean_ID, dir) %>%
distinct()
plot_df
# The dataframe created in the previous chunk is adapted.
plot_df <- res %>%
# Only genes with significant changes (= DEGs) are taken into account, NA values are filtered out.
filter(sig == TRUE & !is.na(dir)) %>%
# Data in the dataframe is grouped by mean_ID and direction.
group_by(mean_ID, dir) %>%
summarize(n = n(), .groups = "drop") %>%
# Columns containing mean_ID and direction are added to the dataframe
right_join(y = plot_df, by = c("mean_ID", "dir")) %>%
mutate(n = ifelse(is.na(n), 0, n)) %>%
# Plate number is removed from mean_ID
separate(mean_ID, sep="_", into=c("Compound", "Conc_ID", NA), remove=F)
plot_df
View(res)
#
plot_df %>%
mutate(n = ifelse(dir == "Down", -n, n)) %>%
ggplot(aes(x=Conc_ID, y=n, fill=dir)) +
geom_col() +
geom_hline(aes(yintercept=0)) +
theme_bw() +
facet_wrap(~Compound, scales="free_x")
plot_df %>%
# If a gene is downregulated, show a negative value in the bar plot
mutate(n = ifelse(dir == "Down", -n, n)) %>%
# Bars show the number of DEGs for each concentration level, and are filled by direction
ggplot(aes(x=Conc_ID, y=n, fill=dir)) +
geom_col() +
geom_hline(aes(yintercept=0)) +
theme_bw()
#facet_wrap(~Compound, scales="free_x")
plot_df %>%
# If a gene is downregulated, show a negative value in the bar plot
mutate(n = ifelse(dir == "Down", -n, n)) %>%
# Bars show the number of DEGs for each concentration level, and are filled by direction
ggplot(aes(x=Conc_ID, y=n, fill=dir)) +
geom_col() +
geom_hline(aes(yintercept=0)) +
theme_bw()
facet_wrap(~Compound, scales="free_x")
plot_df %>%
# If a gene is downregulated, show a negative value in the bar plot
mutate(n = ifelse(dir == "Down", -n, n)) %>%
# Bars show the number of DEGs for each concentration level, and are filled by direction
ggplot(aes(x=Conc_ID, y=n, fill=dir)) +
geom_col() +
geom_hline(aes(yintercept=0)) +
theme_bw() +
facet_wrap(~Compound, scales="free_x")
View(metaData)
# A plot is created for each unique concentration level
for(i in unique(metaData$compound_ID)[1:2]) {
print(res %>%
# mean_ID is separated into compound and concentration ID, plate number is removed.
separate(mean_ID, sep="_", into=c("Compound", "Conc_ID", NA), remove=F) %>%
# NA values are filtered out, output is separated by compound
filter(!is.na(sig) & Compound == i) %>%
# A variable is added to calculate the -log10 of the p value
mutate(log10p = -log10(pvalue)) %>%
ggplot(aes(x = log2FoldChange, y = log10p)) +
# Significant genes are colored
geom_point(aes(color=sig), size=0.5) +
# Labels with gene symbol are added to DEGs that have a very low p value
geom_text_repel(aes(label = ifelse(padj < 1E-4, gene_symbol, NA)),
color="dodgerblue", size=2) +
# Minimum and maximum x-axis values are set to the absolute maximum fold change, with NA values removed
xlim(-max(abs(res$log2FoldChange), na.rm=T), max(abs(res$log2FoldChange), na.rm=T)) +
scale_color_manual(values = c("grey", "dodgerblue")) +
theme_bw() +
# Each plot is titled with the compound ID
ggtitle(i) +
# A separate plot is made for each concentration level
facet_wrap(~Conc_ID))
}
View(res)
# A plot is created for each unique treatment condition.
for(i in unique(metaData$compound_ID)[1:2]) {
print(res %>%
separate(mean_ID, sep="_", into=c("Compound", "Conc_ID", NA), remove=F) %>%
filter(!is.na(sig) & Compound == i) %>%
# Log2 of the base mean (mean of normalised count of all samples) is used as the x-axis
mutate(log2baseMean = log2(baseMean)) %>%
ggplot(aes(x = log2baseMean, y = log2FoldChange)) +
geom_point(aes(color=sig), size=0.5) +
geom_text_repel(aes(label = ifelse(padj < 1E-4, gene_symbol, NA)),
color="dodgerblue", size=2) +
ylim(-max(abs(res$log2FoldChange), na.rm=T), max(abs(res$log2FoldChange), na.rm=T)) +
scale_color_manual(values = c("grey", "dodgerblue")) +
theme_bw() +
ggtitle(i) +
facet_wrap(~Conc_ID))
}
#
devtools::session_info()
rm(list=ls())
root_dir <- "C:/Users/mmpse/Documents/GitHub/BOO-Adam/ORA"
low_store <- "Output/DEGres_low.Rdata"
moderate_store <- "Output/DEGres_moderate.Rdata"
library(tidyverse)
library(enrichR)
rm(list=ls())
root_dir <- "C:/Users/mmpse/Documents/GitHub/BOO-Adam/ORA"
low_fetch <- "Input/DEGres_low.Rdata"
moderate_fetch <- "Input/DEGres_moderate.Rdata"
low_store <- "Output/DEGres_low.Rdata"
moderate_store <- "Output/DEGres_moderate.Rdata"
rm(list=ls())
root_dir <- "C:/Users/mmpse/Documents/GitHub/BOO-Adam/ORA"
low_fetch <- "Input/DEGres_low.Rdata"
moderate_fetch <- "Input/DEGres_moderate.Rdata"
low_store <- "Output/DEGres_low.Rdata"
moderate_store <- "Output/DEGres_moderate.Rdata"
load(paste0(root_dir, moderate_fetch))
rm(list=ls())
root_dir <- "C:/Users/mmpse/Documents/GitHub/BOO-Adam/ORA/"
low_fetch <- "Input/DEGres_low.Rdata"
moderate_fetch <- "Input/DEGres_moderate.Rdata"
low_store <- "Output/DEGres_low.Rdata"
moderate_store <- "Output/DEGres_moderate.Rdata"
load(paste0(root_dir, moderate_fetch))
load(paste0(root_dir, low_fetch))
listEnrichrDbs() %>%
# Preference is given to versions from 2020 or newer
filter(grepl("202", libraryName))
